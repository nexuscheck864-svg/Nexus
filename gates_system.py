import asyncio
import random
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from telegram.error import RetryAfter, TimedOut

# Configurar logger espec√≠fico para gates
logger = logging.getLogger(__name__)

# La instancia db se pasar√° al constructor
db = None

class GateSystem:
    def __init__(self, database_instance):
        self.db = database_instance
        # Actualizar la referencia global para compatibilidad
        global db
        db = database_instance
        self.active_sessions = {}  # Sesiones activas de gates
        self.rate_limit_tracker = {}  # Control de rate limiting

    def is_authorized(self, user_id: str) -> bool:
        """Verificar si el usuario tiene acceso usando la base de datos MongoDB"""
        try:
            # Verificar roles de staff usando MongoDB
            if self.db.is_founder(user_id):
                logger.info(f"[GATES] Usuario {user_id} autorizado como FUNDADOR")
                return True

            if self.db.is_cofounder(user_id):
                logger.info(f"[GATES] Usuario {user_id} autorizado como CO-FUNDADOR")
                return True

            if self.db.is_moderator(user_id):
                logger.info(f"[GATES] Usuario {user_id} autorizado como MODERADOR")
                return True

            # Obtener datos del usuario desde MongoDB
            user_data = self.db.get_user(user_id)
            is_premium = user_data.get('premium', False)
            premium_until = user_data.get('premium_until')

            logger.info(f"[GATES] VERIFICACI√ìN - Usuario {user_id}: premium={is_premium}, until={premium_until}")

            # Si premium=False expl√≠citamente, denegar inmediatamente
            if is_premium is False:
                logger.info(f"[GATES] Usuario {user_id} - Premium False - ACCESO DENEGADO ‚ùå")
                return False

            # L√≥gica para premium=True
            if is_premium is True:
                if premium_until:
                    try:
                        # Parsear fecha de expiraci√≥n
                        if isinstance(premium_until, str):
                            premium_until_date = datetime.fromisoformat(premium_until)
                        else:
                            premium_until_date = premium_until

                        # Verificar si a√∫n es v√°lido
                        if datetime.now() < premium_until_date:
                            logger.info(f"[GATES] Usuario {user_id} - Premium v√°lido hasta {premium_until_date} ‚úÖ")
                            return True
                        else:
                            # Premium expirado - actualizar autom√°ticamente
                            logger.info(f"[GATES] Usuario {user_id} - Premium expirado, actualizando BD")
                            self.db.update_user(user_id, {'premium': False, 'premium_until': None})
                            return False
                    except Exception as date_error:
                        logger.error(f"[GATES] Error fecha premium {user_id}: {date_error}")
                        # Si no hay fecha v√°lida, es premium permanente
                        if premium_until is None:
                            logger.info(f"[GATES] Usuario {user_id} - Premium permanente (sin fecha) ‚úÖ")
                            return True
                        else:
                            logger.warning(f"[GATES] Usuario {user_id} - Error en fecha premium, DENEGANDO por seguridad ‚ùå")
                            return False
                else:
                    # Premium=True sin fecha = premium permanente
                    logger.info(f"[GATES] Usuario {user_id} - Premium permanente (sin until) ‚úÖ")
                    return True

            # Usuario sin premium ni staff
            logger.info(f"[GATES] Usuario {user_id} - SIN ACCESO (premium={is_premium}, staff=False) ‚ùå")
            return False

        except Exception as e:
            logger.error(f"[GATES] Error cr√≠tico verificando {user_id}: {e}")
            return False

    def create_gates_menu(self) -> InlineKeyboardMarkup:
        """Crear men√∫ principal de gates"""
        keyboard = [
            [
                InlineKeyboardButton("üîµ Stripe Gate", callback_data='gate_stripe'),
                InlineKeyboardButton("üü† Amazon Gate", callback_data='gate_amazon')
            ],
            [
                InlineKeyboardButton("üî¥ PayPal Gate", callback_data='gate_paypal'),
                InlineKeyboardButton("üü° Ayden Gate", callback_data='gate_ayden')
            ],
            [
                InlineKeyboardButton("üü¢ Auth Gate", callback_data='gate_auth'),
                InlineKeyboardButton("‚ö´ CCN Charge", callback_data='gate_ccn')
            ],
            [
                InlineKeyboardButton("ü§ñ CyberSource AI", callback_data='gate_cybersource'),
                InlineKeyboardButton("üá¨üáß Worldpay UK", callback_data='gate_worldpay')
            ],
            [
                InlineKeyboardButton("üåê Braintree Pro", callback_data='gate_braintree'),
                InlineKeyboardButton("üìä Gate Status", callback_data='gates_status')
            ],
            [
                InlineKeyboardButton("‚ùå Cerrar", callback_data='gates_close')
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def process_stripe_gate(self, card_data: str) -> dict:
        """Procesar verificaci√≥n Stripe Gate - EFECTIVIDAD COMERCIAL MEJORADA"""
        await asyncio.sleep(random.uniform(2.0, 4.0))

        parts = card_data.split('|')
        if len(parts) < 4:
            return {
                'success': False,
                'message': '‚ùå Formato inv√°lido - Use: 4532123456781234|12|25|123',
                'status': 'DEAD'
            }

        card_number = parts[0]
        exp_month = parts[1]
        exp_year = parts[2]
        cvv = parts[3]

        # ALGORITMO MEJORADO PARA VENTA COMERCIAL (45-75% efectividad)
        success_rate = 0.45  # 45% base COMERCIAL

        # An√°lisis del BIN (bonificaciones SIGNIFICATIVAS)
        premium_bins = ['4532', '4485', '5531', '4539', '4000', '4001', '4242', '5555', '5200']
        if any(card_number.startswith(bin_) for bin_ in premium_bins):
            success_rate += 0.15  # +15% para BINs premium
        elif card_number.startswith(('40', '41', '42', '51', '52', '53')):
            success_rate += 0.10  # +10% para BINs buenos

        # An√°lisis CVV mejorado
        if cvv.endswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')):
            success_rate += 0.05  # +5% para todos los CVVs v√°lidos

        # An√°lisis de fecha de vencimiento
        try:
            current_year = 2025
            exp_year_int = int(exp_year) if len(exp_year) == 4 else 2000 + int(exp_year)
            years_until_expiry = exp_year_int - current_year

            if years_until_expiry >= 2:
                success_rate += 0.08  # +8% para tarjetas con vencimiento lejano
            elif years_until_expiry >= 1:
                success_rate += 0.05  # +5% para tarjetas v√°lidas
        except:
            pass

        # Factor de aleatoriedad controlado
        success_rate *= random.uniform(0.85, 1.15)

        # M√ÅXIMO COMERCIAL del 75%
        success_rate = min(success_rate, 0.75)

        is_success = random.random() < success_rate

        if is_success:
            responses = [
                "‚úÖ Payment successful - $1.00 charged and captured",
                "‚úÖ Transaction approved - $1.00 authorized - CVV2/AVS Match",
                "‚úÖ Stripe: $1.00 charged successfully - Gateway Response: 00",
                "‚úÖ Card charged $1.00 - Risk: Low - Funds captured",
                "‚úÖ Authorization successful - $1.00 processed - Card validated"
            ]
            return {
                'success': True,
                'message': random.choice(responses),
                'status': 'LIVE',
                'gateway': 'Stripe Ultra',
                'amount': '$1.00',
                'is_live': True
            }
        else:
            responses = [
                "‚ùå Card declined - Insufficient funds",
                "‚ùå Transaction failed - Invalid CVV",
                "‚ùå Payment declined - Do not honor",
                "‚ùå Risk threshold exceeded",
                "‚ùå Generic decline - Contact bank",
                "‚ùå Card blocked - Security"
            ]
            return {
                'success': False,
                'message': random.choice(responses),
                'status': 'DEAD',
                'gateway': 'Stripe Ultra',
                'amount': '$0.00',
                'is_live': False
            }

    async def process_amazon_gate(self, card_data: str) -> dict:
        """Procesar verificaci√≥n Amazon Gate - EFECTIVIDAD COMERCIAL"""
        await asyncio.sleep(random.uniform(3.0, 5.0))

        parts = card_data.split('|')
        if len(parts) < 4:
            return {
                'success': False,
                'message': '‚ùå Formato inv√°lido',
                'status': 'DEAD'
            }

        # Amazon mejorado para uso comercial - 40-65% efectividad
        success_rate = 0.40  # 40% base COMERCIAL

        card_number = parts[0]
        if card_number.startswith('4'):
            success_rate += 0.12  # Amazon prefiere Visa (+12%)
        elif card_number.startswith('5'):
            success_rate += 0.08  # MasterCard (+8%)

        # Factor de aleatoriedad controlado
        success_rate *= random.uniform(0.90, 1.25)

        # M√ÅXIMO COMERCIAL del 65%
        success_rate = min(success_rate, 0.65)

        is_success = random.random() < success_rate

        if is_success:
            responses = [
                "‚úÖ Amazon: $1.00 charged - Payment method verified",
                "‚úÖ Amazon: Card charged $1.00 - Ready for purchases",
                "‚úÖ Amazon: $1.00 authorization successful - Billing updated",
                "‚úÖ Amazon: Payment processed $1.00 - Card validated"
            ]
            return {
                'success': True,
                'message': random.choice(responses),
                'status': 'LIVE',
                'gateway': 'Amazon Prime',
                'amount': '$1.00',
                'is_live': True
            }
        else:
            responses = [
                "‚ùå Amazon: Invalid payment method",
                "‚ùå Amazon: Card verification failed",
                "‚ùå Amazon: Unable to add card",
                "‚ùå Amazon: Billing address mismatch",
                "‚ùå Amazon: Security review required"
            ]
            return {
                'success': False,
                'message': random.choice(responses),
                'status': 'DEAD',
                'gateway': 'Amazon Prime',
                'amount': '$0.00',
                'is_live': False
            }

    async def process_paypal_gate(self, card_data: str) -> dict:
        """Procesar verificaci√≥n PayPal Gate - EFECTIVIDAD COMERCIAL"""
        await asyncio.sleep(random.uniform(2.5, 4.5))

        # PayPal mejorado para venta comercial (35-60% efectividad)
        success_rate = 0.35  # 35% base comercial

        parts = card_data.split('|')
        if len(parts) >= 4:
            card_number = parts[0]
            # Bonus por tipo de tarjeta
            if card_number.startswith(('4532', '4485', '5531')):
                success_rate += 0.15  # +15% para BINs premium
            elif card_number.startswith(('4', '5')):
                success_rate += 0.08  # +8% para Visa/MC

        # Factor de aleatoriedad controlado
        success_rate *= random.uniform(0.90, 1.20)

        # M√ÅXIMO COMERCIAL del 60%
        success_rate = min(success_rate, 0.60)

        is_success = random.random() < success_rate

        if is_success:
            responses = [
                "‚úÖ PayPal: $1.00 charged - Card linked successfully",
                "‚úÖ PayPal: Payment processed $1.00 - Account verified",
                "‚úÖ PayPal: $1.00 authorization complete - Card validated",
                "‚úÖ PayPal: Transaction approved $1.00 - Ready for payments"
            ]
            return {
                'success': True,
                'message': random.choice(responses),
                'status': 'LIVE',
                'gateway': 'PayPal Express',
                'amount': '$1.00',
                'is_live': True
            }
        else:
            responses = [
                "‚ùå PayPal: Card verification failed",
                "‚ùå PayPal: Unable to link card",
                "‚ùå PayPal: Security check failed",
                "‚ùå PayPal: Invalid card data"
            ]
            return {
                'success': False,
                'message': random.choice(responses),
                'status': 'DEAD',
                'gateway': 'PayPal Express',
                'amount': '$0.00',
                'is_live': False
            }

    async def process_ayden_gate(self, card_data: str) -> dict:
        """Procesar verificaci√≥n Ayden Gate - EFECTIVIDAD COMERCIAL"""
        await asyncio.sleep(random.uniform(3.5, 5.5))

        parts = card_data.split('|')
        if len(parts) < 4:
            return {
                'success': False,
                'message': '‚ùå Formato inv√°lido',
                'status': 'DEAD'
            }

        # Ayden mejorado para venta comercial - 38-58% efectividad
        success_rate = 0.38  # 38% base comercial

        card_number = parts[0]
        # Ayden prefiere ciertos BINs europeos
        if card_number.startswith(('4000', '4001', '5200', '5201', '4532', '4485')):
            success_rate += 0.12  # +12% para BINs premium
        elif card_number.startswith(('4', '5')):
            success_rate += 0.06  # +6% para tarjetas v√°lidas

        # Factor de aleatoriedad controlado
        success_rate *= random.uniform(0.85, 1.20)

        # M√ÅXIMO COMERCIAL del 58%
        success_rate = min(success_rate, 0.58)

        is_success = random.random() < success_rate

        if is_success:
            responses = [
                "‚úÖ Ayden: $1.00 payment authorized successfully",
                "‚úÖ Ayden: Card charged $1.00 - Verification passed",
                "‚úÖ Ayden: $1.00 transaction approved - EU gateway",
                "‚úÖ Ayden: Payment processed $1.00 - 3DS bypass successful"
            ]
            return {
                'success': True,
                'message': random.choice(responses),
                'status': 'LIVE',
                'gateway': 'Ayden EU',
                'amount': '$1.00',
                'is_live': True
            }
        else:
            responses = [
                "‚ùå Ayden: Authorization declined",
                "‚ùå Ayden: Card not supported",
                "‚ùå Ayden: Risk score too high",
                "‚ùå Ayden: 3DS authentication failed"
            ]
            return {
                'success': False,
                'message': random.choice(responses),
                'status': 'DEAD',
                'gateway': 'Ayden EU',
                'amount': '$0.00',
                'is_live': False
            }

    async def process_auth_gate(self, card_data: str) -> dict:
        """Procesar verificaci√≥n Auth Gate - EFECTIVIDAD REALISTA"""
        await asyncio.sleep(random.uniform(1.5, 3.0))

        # Auth Gate efectividad ULTRA REALISTA (8-16% m√°ximo)
        success_rate = 0.04  # 4% base realista

        # Factor de aleatoriedad
        success_rate *= random.uniform(0.5, 2.0)

        # M√ÅXIMO REALISTA del 16%
        success_rate = min(success_rate, 0.16)

        is_success = random.random() < success_rate

        if is_success:
            return {
                'success': True,
                'message': "‚úÖ Auth: Verification successful",
                'status': 'LIVE',
                'gateway': 'Auth Check',
                'amount': '$0.01',
                'is_live': True
            }
        else:
            responses = [
                "‚ùå Auth: Verification failed",
                "‚ùå Auth: Invalid card data",
                "‚ùå Auth: CVV check failed"
            ]
            return {
                'success': False,
                'message': random.choice(responses),
                'status': 'DEAD',
                'gateway': 'Auth Check',
                'amount': '$0.00',
                'is_live': False
            }

    async def process_ccn_charge(self, card_data: str) -> dict:
        """Procesar CCN Charge Gate - EFECTIVIDAD REALISTA"""
        await asyncio.sleep(random.uniform(2.0, 4.0))

        parts = card_data.split('|')
        if len(parts) < 4:
            return {
                'success': False,
                'message': '‚ùå Formato inv√°lido',
                'status': 'DEAD'
            }

        # CCN Charge efectividad COMERCIAL (42-68% efectividad)
        success_rate = 0.42  # 42% base comercial

        card_number = parts[0]
        # CCN prefiere ciertos tipos de tarjeta
        if card_number.startswith(('4111', '4242', '5555', '4532', '4485')):
            success_rate += 0.15  # +15% para BINs premium
        elif card_number.startswith(('4', '5')):
            success_rate += 0.08  # +8% para tarjetas v√°lidas

        # Factor de aleatoriedad controlado
        success_rate *= random.uniform(0.88, 1.18)

        # M√ÅXIMO COMERCIAL del 68%
        success_rate = min(success_rate, 0.68)

        is_success = random.random() < success_rate

        if is_success:
            responses = [
                "‚úÖ CCN: Charge successful - $1.00 processed",
                "‚úÖ CCN: Payment $1.00 processed - CVV verified",
                "‚úÖ CCN: Transaction approved $1.00 - Low risk",
                "‚úÖ CCN: $1.00 charged successfully - Funds captured"
            ]
            return {
                'success': True,
                'message': random.choice(responses),
                'status': 'LIVE',
                'gateway': 'CCN Charge',
                'amount': '$1.00',
                'is_live': True
            }
        else:
            responses = [
                "‚ùå CCN: Charge declined - Insufficient funds",
                "‚ùå CCN: Payment failed - Invalid card",
                "‚ùå CCN: Transaction denied - Bank decline",
                "‚ùå Risk threshold exceeded"
            ]
            return {
                'success': False,
                'message': random.choice(responses),
                'status': 'DEAD',
                'gateway': 'CCN Charge',
                'amount': '$0.00',
                'is_live': False
            }

    async def process_cybersource_ai(self, card_data: str) -> dict:
        """Procesar CyberSource AI Gate - INTELIGENCIA ARTIFICIAL ANTI-FRAUDE"""
        await asyncio.sleep(random.uniform(3.5, 6.0))  # IA toma m√°s tiempo

        parts = card_data.split('|')
        if len(parts) < 4:
            return {
                'success': False,
                'message': '‚ùå Formato inv√°lido',
                'status': 'DEAD'
            }

        card_number = parts[0]
        exp_month = parts[1]
        exp_year = parts[2]
        cvv = parts[3]

        # CyberSource AI - ULTRA RESTRICTIVO pero efectivo para premium
        success_rate = 0.09  # 9% base (optimizado para premium)

        # An√°lisis de IA simulado - patrones complejos
        digit_pattern = int(card_number[-2:]) if len(card_number) >= 2 else 0

        # Algoritmo de IA para detecci√≥n de patrones
        if digit_pattern % 17 == 0:  # Patr√≥n matem√°tico espec√≠fico
            success_rate += 0.04  # +4%
        elif digit_pattern % 7 == 0:  # Patr√≥n secundario
            success_rate += 0.02  # +2%

        # An√°lisis de CVV con IA
        cvv_sum = sum(int(d) for d in cvv if d.isdigit())
        if cvv_sum % 5 == 0:
            success_rate += 0.02  # +2%

        # An√°lisis de fecha de vencimiento
        try:
            if int(exp_year) >= 2027:
                success_rate += 0.03  # +3% para tarjetas con vencimiento lejano
        except ValueError:
            pass

        # Factor de IA - m√°s variable pero controlado
        success_rate *= random.uniform(0.4, 1.6)

        # M√ÅXIMO para CyberSource AI: 25%
        success_rate = min(success_rate, 0.25)

        is_success = random.random() < success_rate

        if is_success:
            responses = [
                "‚úÖ CyberSource AI: ACCEPT - Low risk score",
                "‚úÖ CyberSource AI: AUTHORIZED - Pattern verified",
                "‚úÖ CyberSource AI: SUCCESS - ML model approved",
                "‚úÖ CyberSource AI: APPROVED - Fraud score: 0.12"
            ]
            return {
                'success': True,
                'message': random.choice(responses),
                'status': 'LIVE',
                'gateway': 'CyberSource AI',
                'amount': '$0.01',
                'is_live': True
            }
        else:
            responses = [
                "‚ùå CyberSource AI: REJECT - High risk score",
                "‚ùå CyberSource AI: DECLINED - ML flagged",
                "‚ùå CyberSource AI: BLOCKED - Fraud detection",
                "‚ùå CyberSource AI: REVIEW - Manual verification required",
                "‚ùå CyberSource AI: DENIED - Pattern anomaly detected"
            ]
            return {
                'success': False,
                'message': random.choice(responses),
                'status': 'DEAD',
                'gateway': 'CyberSource AI',
                'amount': '$0.00',
                'is_live': False
            }

    async def process_worldpay_gate(self, card_data: str) -> dict:
        """Procesar Worldpay Gate - PROCESAMIENTO BRIT√ÅNICO PREMIUM"""
        await asyncio.sleep(random.uniform(2.5, 4.5))

        parts = card_data.split('|')
        if len(parts) < 4:
            return {
                'success': False,
                'message': '‚ùå Formato inv√°lido',
                'status': 'DEAD'
            }

        card_number = parts[0]
        exp_month = parts[1]
        exp_year = parts[2]
        cvv = parts[3]

        # Worldpay efectividad PREMIUM (10-20% m√°ximo)
        success_rate = 0.08  # 8% base optimizado

        # An√°lisis espec√≠fico de Worldpay por tipo de tarjeta
        if card_number.startswith('4'):  # Visa
            success_rate += 0.05  # +5% para Visa
        elif card_number.startswith('5'):  # MasterCard
            success_rate += 0.03  # +3% para MasterCard
        elif card_number.startswith('3'):  # American Express
            success_rate += 0.02  # +2% para Amex

        # An√°lisis de BIN brit√°nico
        uk_friendly_bins = ['4000', '4001', '4462', '4486', '5200', '5201']
        if any(card_number.startswith(bin_) for bin_ in uk_friendly_bins):
            success_rate += 0.04  # +4% para BINs amigables

        # Factor de procesamiento brit√°nico
        success_rate *= random.uniform(0.7, 1.4)

        # M√ÅXIMO Worldpay: 20%
        success_rate = min(success_rate, 0.20)

        is_success = random.random() < success_rate

        if is_success:
            responses = [
                "‚úÖ Worldpay: AUTHORISED - Payment captured",
                "‚úÖ Worldpay: SUCCESS - Transaction settled",
                "‚úÖ Worldpay: APPROVED - UK gateway response",
                "‚úÖ Worldpay: CAPTURED - Funds secured"
            ]
            return {
                'success': True,
                'message': random.choice(responses),
                'status': 'LIVE',
                'gateway': 'Worldpay UK',
                'amount': '$0.30',
                'is_live': True
            }
        else:
            responses = [
                "‚ùå Worldpay: REFUSED - Issuer declined",
                "‚ùå Worldpay: FAILED - Card verification failed",
                "‚ùå Worldpay: CANCELLED - Risk assessment",
                "‚ùå Worldpay: BLOCKED - Fraud prevention",
                "‚ùå Worldpay: EXPIRED - Card invalid"
            ]
            return {
                'success': False,
                'message': random.choice(responses),
                'status': 'DEAD',
                'gateway': 'Worldpay UK',
                'amount': '$0.00',
                'is_live': False
            }

    async def process_braintree_gate(self, card_data: str) -> dict:
        """Procesar Braintree Gate - AN√ÅLISIS TEMPORAL AVANZADO"""
        await asyncio.sleep(random.uniform(2.0, 3.5))

        parts = card_data.split('|')
        if len(parts) < 4:
            return {
                'success': False,
                'message': '‚ùå Formato inv√°lido',
                'status': 'DEAD'
            }

        card_number = parts[0]
        exp_month = parts[1]
        exp_year = parts[2]
        cvv = parts[3]

        # Braintree efectividad PREMIUM (12-24% m√°ximo)
        success_rate = 0.10  # 10% base optimizado

        # An√°lisis temporal espec√≠fico de Braintree
        try:
            current_year = 2025
            years_until_expiry = int(exp_year) - current_year

            if years_until_expiry >= 4:
                success_rate += 0.06  # +6% para tarjetas muy lejanas
            elif years_until_expiry >= 2:
                success_rate += 0.04  # +4% para tarjetas lejanas
            elif years_until_expiry >= 1:
                success_rate += 0.02  # +2% para tarjetas normales
            else:
                success_rate -= 0.02  # -2% para tarjetas pr√≥ximas a vencer
        except ValueError:
            pass

        # An√°lisis adicional del n√∫mero de tarjeta
        digit_sum = sum(int(d) for d in card_number if d.isdigit())
        if digit_sum % 13 == 0:  # Patr√≥n matem√°tico espec√≠fico
            success_rate += 0.03  # +3%

        # An√°lisis de CVV para Braintree
        if len(cvv) == 3 and cvv.isdigit():
            cvv_value = int(cvv)
            if cvv_value % 11 == 0:
                success_rate += 0.02  # +2%

        # Factor de procesamiento Braintree
        success_rate *= random.uniform(0.8, 1.5)

        # M√ÅXIMO Braintree: 24%
        success_rate = min(success_rate, 0.24)

        is_success = random.random() < success_rate

        if is_success:
            responses = [
                "‚úÖ Braintree: AUTHORIZED - Transaction approved",
                "‚úÖ Braintree: SUCCESS - Payment processed",
                "‚úÖ Braintree: APPROVED - Gateway response OK",
                "‚úÖ Braintree: CAPTURED - Settlement pending"
            ]
            return {
                'success': True,
                'message': random.choice(responses),
                'status': 'LIVE',
                'gateway': 'Braintree Pro',
                'amount': '$0.25',
                'is_live': True
            }
        else:
            responses = [
                "‚ùå Braintree: DECLINED - Issuer refused",
                "‚ùå Braintree: FAILED - Card verification failed",
                "‚ùå Braintree: TIMEOUT - Gateway unavailable",
                "‚ùå Braintree: REJECTED - Risk assessment",
                "‚ùå Braintree: BLOCKED - Fraud protection"
            ]
            return {
                'success': False,
                'message': random.choice(responses),
                'status': 'DEAD',
                'gateway': 'Braintree Pro',
                'amount': '$0.00',
                'is_live': False
            }

    async def safe_edit_message(self, message, text, reply_markup=None, parse_mode=ParseMode.MARKDOWN):
        """Editar mensaje de forma segura con control de rate limiting"""
        try:
            await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        except RetryAfter as e:
            # Esperar el tiempo requerido por Telegram
            await asyncio.sleep(e.retry_after + 1)
            try:
                await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
            except Exception:
                # Si falla de nuevo, enviar nuevo mensaje
                await message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        except TimedOut:
            await asyncio.sleep(2)
            try:
                await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
            except Exception:
                await message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        except Exception:
            # Como √∫ltimo recurso, enviar nuevo mensaje
            await message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)

# Instancia global del sistema de gates
gate_system = None

async def gates_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando principal /gates - Todos pueden ver, solo premium/fundadores pueden usar"""
    global gate_system
    # Importar db aqu√≠ para asegurar que tenemos la instancia actual
    from telegram_bot import db as current_db
    if gate_system is None:
        gate_system = GateSystem(current_db)
    else:
        # Actualizar la referencia de la base de datos
        gate_system.db = current_db

    user_id = str(update.effective_user.id)

    # Verificar cr√©ditos (5 cr√©ditos por uso) - Solo si no es autorizado
    user_data = db.get_user(user_id)
    is_authorized = gate_system.is_authorized(user_id)

    # Los usuarios autorizados (premium/staff) no necesitan cr√©ditos
    if not is_authorized and user_data['credits'] < 5:
        await update.message.reply_text(
            "‚ùå **LOOT INSUFICIENTE** ‚ùå\n\n"
            f"üí∞ **Necesitas:** 5 loot\n"
            f"üí≥ **Tienes:** {user_data['credits']} loot\n\n"
            "üéÅ **Obtener m√°s loot:**\n"
            "‚Ä¢ `/loot` - Bono diario gratis\n"
            "‚Ä¢ `/simulator` - Casino bot\n"
            "‚Ä¢ Contactar administraci√≥n",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # Crear men√∫ de gates
    keyboard = gate_system.create_gates_menu()

    # Determinar tipo de usuario y acceso
    is_founder = db.is_founder(user_id)
    is_cofounder = db.is_cofounder(user_id)
    is_moderator = db.is_moderator(user_id)
    is_authorized = gate_system.is_authorized(user_id)

    # Verificar premium - MEJORADO PARA DEPURACI√ìN
    user_data = db.get_user(user_id)
    is_premium = user_data.get('premium', False)
    premium_until = user_data.get('premium_until')

    # Log detallado para depuraci√≥n
    logger.info(f"Gates command - Usuario {user_id}: premium={is_premium}, until={premium_until}")

    # Verificar si el premium es v√°lido
    premium_valid = False
    if is_premium:
        if premium_until:
            try:
                if isinstance(premium_until, str):
                    premium_until_date = datetime.fromisoformat(premium_until)
                else:
                    premium_until_date = premium_until

                if datetime.now() < premium_until_date:
                    premium_valid = True
                    logger.info(f"Premium v√°lido hasta {premium_until_date}")
                else:
                    logger.info(f"Premium expirado en {premium_until_date}")
            except Exception as e:
                logger.error(f"Error verificando fecha premium: {e}")
                # Si hay error pero tiene premium=True, considerar v√°lido
                premium_valid = True
        else:
            # Premium sin fecha = permanente
            premium_valid = True
            logger.info(f"Premium permanente detectado")

    # Determinar tipo de usuario y acceso basado en roles de staff y premium
    if is_founder:
        user_type = "üëë FUNDADOR"
        access_text = "‚úÖ ACCESO COMPLETO"
        status_section = "[‚úì] ACCESO TOTAL HABILITADO\n[‚úì] SISTEMAS OPERATIVOS"
        modules_status = "üîì"
        final_message = "‚û§ Selecciona tu m√≥dulo preferido:"
    elif is_cofounder:
        user_type = "üíé CO-FUNDADOR"
        access_text = "‚úÖ ACCESO COMPLETO"
        status_section = "[‚úì] ACCESO TOTAL HABILITADO\n[‚úì] SISTEMAS OPERATIVOS"
        modules_status = "üîì"
        final_message = "‚û§ Selecciona tu m√≥dulo preferido:"
    elif is_moderator:
        user_type = "üõ°Ô∏è MODERADOR"
        access_text = "‚úÖ ACCESO COMPLETO"
        status_section = "[‚úì] ACCESO TOTAL HABILITADO\n[‚úì] SISTEMAS OPERATIVOS"
        modules_status = "üîì"
        final_message = "‚û§ Selecciona tu m√≥dulo preferido:"
    elif premium_valid:
        user_type = "üíé PREMIUM"
        access_text = "‚úÖ ACCESO COMPLETO"
        status_section = "[‚úì] ACCESO TOTAL HABILITADO\n[‚úì] SISTEMAS OPERATIVOS"
        modules_status = "üîì"
        final_message = "‚û§ Selecciona tu m√≥dulo preferido:"
    else:
        user_type = "üÜì USUARIO EST√ÅNDAR"
        access_text = "‚ùå SOLO VISTA PREVIA"
        status_section = "[!] ACCESO A FUNCIONES DENEGADO\n[!] VISUALIZACI√ìN TEMPORAL ACTIVADA"
        modules_status = "üîí"
        final_message = "‚û§ Desbloquea acceso total:\n    ‚Ü≥ PREMIUM ACTIVATION: @SteveCHBll"

    # Plantilla unificada para todos los usuarios
    response = f"‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
    response += f"‚îÉ    GATES CORE   -  DARK ACCESS     ‚îÉ\n"
    response += f"‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
    response += f"‚úò USUARIO: {user_type}\n"
    response += f"‚úò ESTADO : {access_text}\n"
    response += f"‚úò LOOT DISPONIBLE: {user_data['credits']}\n"
    response += f"‚úò COSTO POR GATE: 1 üîª\n"
    response += f"‚úò M√ìDULOS RESTRINGIDOS: {modules_status}\n\n"
    response += f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    response += f"{status_section}\n"
    response += f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
    response += f">> GATES DISPONIBLES:\n"
    response += f"‚îÇ  ‚Üí üîπ Stripe                    ‚Üí üü† Amazon\n"
    response += f"‚îÇ  ‚Üí üî¥ PayPal                   ‚Üí üü° Ayden\n"
    response += f"‚îÇ  ‚Üí üü¢ Auth                       ‚Üí ‚ö´ CCN Charge\n"
    response += f"‚îÇ  ‚Üí ü§ñ CyberSource AI\n"
    response += f"‚îÇ  ‚Üí üåê Braintree Pro       ‚Üí üá¨üáß Worldpay UK\n\n"
    response += f"{final_message}"

    await update.message.reply_text(
        response,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_gate_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manejar callbacks de gates"""
    global gate_system
    query = update.callback_query
    user_id = str(query.from_user.id)

    # Importar db aqu√≠ para asegurar que tenemos la instancia actual
    from telegram_bot import db as current_db
    if gate_system is not None:
        gate_system.db = current_db

    await query.answer()

    if query.data == 'gates_close':
        await query.edit_message_text(
            "‚ùå **Gates System cerrado**\n\n"
            "üí° Usa `/gates` para acceder nuevamente",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    if query.data == 'gates_status':
        status_text = f"‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
        status_text += f"‚îÉ    SYSTEM MONITOR - STATUS     ‚îÉ\n"
        status_text += f"‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
        status_text += f">> GATEWAY STATUS:\n"
        status_text += f"‚îÇ  üîπ Stripe.......: üü¢ ONLINE\n"
        status_text += f"‚îÇ  üü† Amazon.......: üü¢ ONLINE\n"
        status_text += f"‚îÇ  üî¥ PayPal.......: üü¢ ONLINE\n"
        status_text += f"‚îÇ  üü° Ayden........: üü¢ ONLINE\n"
        status_text += f"‚îÇ  üü¢ Auth.........: üü¢ ONLINE\n"
        status_text += f"‚îÇ  ‚ö´ CCN Charge...: üü¢ ONLINE\n"
        status_text += f"‚îÇ  ü§ñ CyberSource..: üü¢ ONLINE [PREMIUM]\n"
        status_text += f"‚îÇ  üá¨üáß Worldpay....: üü¢ ONLINE [PREMIUM]\n"
        status_text += f"‚îÇ  üåê Braintree....: üü¢ ONLINE [PREMIUM]\n\n"
        status_text += f">> SYSTEM INFO:\n"
        status_text += f"‚îÇ  ‚Ä¢ √öltima sync...: {datetime.now().strftime('%H:%M:%S')}\n"
        status_text += f"‚îÇ  ‚Ä¢ Uptime........: 99.9%\n"
        status_text += f"‚îÇ  ‚Ä¢ Efectividad...: PRO\n\n"
        status_text += f"‚û§ Todos los gateways operativos"

        back_keyboard = [[InlineKeyboardButton("üîô Volver", callback_data='gates_back')]]
        await query.edit_message_text(
            status_text,
            reply_markup=InlineKeyboardMarkup(back_keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        return

    if query.data == 'gates_back':
        keyboard = gate_system.create_gates_menu()
        user_data = db.get_user(user_id)

        # Verificar autorizaci√≥n con datos frescos
        gate_system.db.load_data()
        is_authorized = gate_system.is_authorized(user_id)
        is_founder = db.is_founder(user_id)
        is_cofounder = db.is_cofounder(user_id)
        is_moderator = db.is_moderator(user_id)
        is_premium = user_data.get('premium', False)

        # Verificar que el premium sea v√°lido
        premium_valid = False
        if is_premium:
            premium_until = user_data.get('premium_until')
            if premium_until:
                try:
                    if isinstance(premium_until, str):
                        premium_until_date = datetime.fromisoformat(premium_until)
                    else:
                        premium_until_date = premium_until
                    premium_valid = datetime.now() < premium_until_date
                except:
                    premium_valid = True
            else:
                premium_valid = True

        # Determinar tipo de usuario y estado
        if is_founder:
            user_type = "üëë FUNDADOR"
            access_text = "‚úÖ ACCESO COMPLETO"
            status_section = "[‚úì] ACCESO TOTAL HABILITADO\n[‚úì] SISTEMAS OPERATIVOS"
            modules_status = "üîì"
            final_message = "‚û§ Selecciona gateway deseado:"
        elif is_cofounder:
            user_type = "üíé CO-FUNDADOR"
            access_text = "‚úÖ ACCESO COMPLETO"
            status_section = "[‚úì] ACCESO TOTAL HABILITADO\n[‚úì] SISTEMAS OPERATIVOS"
            modules_status = "üîì"
            final_message = "‚û§ Selecciona gateway deseado:"
        elif is_moderator:
            user_type = "üõ°Ô∏è MODERADOR"
            access_text = "‚úÖ ACCESO COMPLETO"
            status_section = "[‚úì] ACCESO TOTAL HABILITADO\n[‚úì] SISTEMAS OPERATIVOS"
            modules_status = "üîì"
            final_message = "‚û§ Selecciona gateway deseado:"
        elif premium_valid:
            user_type = "üíé PREMIUM"
            access_text = "‚úÖ ACCESO COMPLETO"
            status_section = "[‚úì] ACCESO TOTAL HABILITADO\n[‚úì] SISTEMAS OPERATIVOS"
            modules_status = "üîì"
            final_message = "‚û§ Selecciona gateway deseado:"
        else:
            user_type = "üÜì USUARIO EST√ÅNDAR"
            access_text = "‚ùå SOLO VISTA PREVIA"
            status_section = "[!] ACCESO A FUNCIONES DENEGADO\n[!] VISUALIZACI√ìN TEMPORAL ACTIVADA"
            modules_status = "üîí"
            final_message = "‚û§ Desbloquea acceso total:\n    ‚Ü≥ PREMIUM ACTIVATION: @SteveCHBll"

        # Plantilla unificada
        response = f"‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
        response += f"‚îÉ    GATES CORE   -  DARK ACCESS     ‚îÉ\n"
        response += f"‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
        response += f"‚úò USUARIO: {user_type}\n"
        response += f"‚úò ESTADO : {access_text}\n"
        response += f"‚úò CR√âDITOS DISPONIBLES: {user_data['credits']}\n"
        response += f"‚úò COSTO POR GATE: 1 üîª\n"
        response += f"‚úò M√ìDULOS RESTRINGIDOS: {modules_status}\n\n"
        response += f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        response += f"{status_section}\n"
        response += f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        response += f">> GATES DISPONIBLES:\n"
        response += f"‚îÇ  ‚Üí üîπ Stripe                    ‚Üí üü† Amazon\n"
        response += f"‚îÇ  ‚Üí üî¥ PayPal                   ‚Üí üü° Ayden\n"
        response += f"‚îÇ  ‚Üí üü¢ Auth                       ‚Üí ‚ö´ CCN Charge\n"
        response += f"‚îÇ  ‚Üí ü§ñ CyberSource AI\n"
        response += f"‚îÇ  ‚Üí üåê Braintree Pro       ‚Üí üá¨üáß Worldpay UK\n\n"
        response += f"{final_message}"

        await query.edit_message_text(
            response,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # Procesar selecci√≥n de gate espec√≠fico
    gate_types = {
        'gate_stripe': ('Stripe Gate', 'üîµ'),
        'gate_amazon': ('Amazon Gate', 'üü†'),
        'gate_paypal': ('PayPal Gate', 'üî¥'),
        'gate_ayden': ('Ayden Gate', 'üü°'),
        'gate_auth': ('Auth Gate', 'üü¢'),
        'gate_ccn': ('CCN Charge', '‚ö´'),
        'gate_cybersource': ('CyberSource AI', 'ü§ñ'),
        'gate_worldpay': ('Worldpay UK', 'üá¨üáß'),
        'gate_braintree': ('Braintree Pro', 'üåê')
    }

    if query.data in gate_types:
        # VERIFICAR PERMISOS AL SELECCIONAR GATE CON DATOS FRESCOS
        gate_system.db.load_data()  # FORZAR RECARGA ANTES DE VERIFICAR
        is_authorized = gate_system.is_authorized(user_id)

        # Log detallado para depuraci√≥n con datos frescos
        user_data = db.get_user(user_id)
        logger.info(f"[GATE CALLBACK] Usuario {user_id}: authorized={is_authorized}, premium={user_data.get('premium', False)}, until={user_data.get('premium_until', 'None')}")

        if not is_authorized:
            await query.edit_message_text(
                "üíª SYSTEM SECURITY NODE üíª\n\n"
                "üë§ USER STATUS: üÜì FREE_MODE\n"
                "üõ° ACCESS LEVEL: üö´ RESTRICTED\n"
                "üìÖ PREMIUM VALID UNTIL: ‚ùå NONE\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                "‚ö† ERROR 403: ACCESS DENIED ‚ö†\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üîí RESTRICTED MODULES\n\n"
                "üó° Gates Avanzados OFF\n"
                "üöÄ Procesamiento PRO OFF\n"
                "üõ° Anti-Rate Limit OFF\n\n"
                "üíé PREMIUM MODULES\n\n"
                "üó° Gates Avanzados ON\n"
                "üéØ Efectividad PRO ON\n"
                "ü§ù Soporte Prioritario\n"
                "üì¶ Multi-Card Process\n"
                "‚ôæ Sin L√≠mite de Uso\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                "üì© CONTACT ADMIN: @SteveCHBll\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
            return

        gate_name, gate_emoji = gate_types[query.data]

        # Crear sesi√≥n para este usuario (solo si est√° autorizado)
        gate_system.active_sessions[user_id] = {
            'gate_type': query.data,
            'gate_name': gate_name,
            'gate_emoji': gate_emoji,
            'timestamp': datetime.now()
        }

        response = f"‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
        response += f"‚îÉ    {gate_name.upper()} - DARK PROCESS     ‚îÉ\n"
        response += f"‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
        response += f">> GATEWAY INFO:\n"
        response += f"‚îÇ  ‚Ä¢ Estado........: üü¢ ONLINE\n"
        response += f"‚îÇ  ‚Ä¢ Precio........: 5 cr√©ditos/tarjeta\n"
        response += f"‚îÇ  ‚Ä¢ Plan..........: Premium Access\n"
        response += f"‚îÇ  ‚Ä¢ Comando.......: /am\n\n"
        response += f">> FORMAT REQUIRED:\n"
        response += f"‚îÇ  ‚Üí 4532123456781234|12|25|123\n\n"
        response += f">> PROCESS INFO:\n"
        response += f"‚îÇ  ‚Ä¢ Auto-processing: ‚úÖ\n"
        response += f"‚îÇ  ‚Ä¢ Tiempo estimado: 2-5s\n"
        response += f"‚îÇ  ‚Ä¢ Efectividad....: PRO\n\n"
        response += f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        response += f"[!] Sistema listo para procesar\n"
        response += f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        response += f"‚û§ Env√≠a tu tarjeta para procesar"

        back_keyboard = [[InlineKeyboardButton("üîô Volver al men√∫", callback_data='gates_back')]]

        await query.edit_message_text(
            response,
            reply_markup=InlineKeyboardMarkup(back_keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

async def process_gate_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesar m√∫ltiples tarjetas enviadas cuando hay sesi√≥n activa - CON CONTROL DE RATE LIMITING"""
    global gate_system
    user_id = str(update.effective_user.id)

    # Importar db aqu√≠ para asegurar que tenemos la instancia actual
    from telegram_bot import db as current_db
    if gate_system is not None:
        gate_system.db = current_db

    # Verificar si hay sesi√≥n activa primero
    if user_id not in gate_system.active_sessions:
        return

    session = gate_system.active_sessions[user_id]
    message_text = update.message.text.strip()

    # Detectar m√∫ltiples tarjetas en el mensaje
    import re
    card_pattern = r'\b\d{13,19}\|\d{1,2}\|\d{2,4}\|\d{3,4}\b'
    cards_found = re.findall(card_pattern, message_text)

    if not cards_found:
        await update.message.reply_text(
            "‚ùå **Formato inv√°lido**\n\n"
            "üí° **Formato correcto:**\n"
            "`4532123456781234|12|25|123`\n\n"
            "üìã **Puedes enviar m√∫ltiples tarjetas separadas por l√≠neas**",
            parse_mode=ParseMode.MARKDOWN)
        return

    # Verificar l√≠mites seg√∫n nivel de usuario
    is_founder = db.is_founder(user_id)
    is_cofounder = db.is_cofounder(user_id)
    user_data = db.get_user(user_id)
    is_premium = user_data.get('premium', False)

    # Establecer l√≠mites
    if is_founder:
        max_cards = 15  # Fundadores m√°s tarjetas
        user_type = "üëë FUNDADOR"
    elif is_cofounder:
        max_cards = 15  # Co-fundadores tambi√©n m√°s
        user_type = "üíé CO-FUNDADOR"
    elif is_premium:
        max_cards = 15   # Premium moderado
        user_type = "üíé PREMIUM"
    else:
        await update.message.reply_text("‚ùå Acceso denegado")
        return

    # Verificar l√≠mite de tarjetas
    if len(cards_found) > max_cards:
        await update.message.reply_text(
            f"‚ùå **L√çMITE EXCEDIDO** ‚ùå\n\n"
            f"üéØ **Tu nivel:** {user_type}\n"
            f"üìä **L√≠mite m√°ximo:** {max_cards} tarjetas\n"
            f"üì§ **Enviaste:** {len(cards_found)} tarjetas\n\n"
            f"üí° **Env√≠a m√°ximo {max_cards} tarjetas por vez**",
            parse_mode=ParseMode.MARKDOWN)
        return

    # Verificar cr√©ditos (5 por tarjeta)
    total_cost = len(cards_found) * 5
    if user_data['credits'] < total_cost:
        await update.message.reply_text(
            f"‚ùå **LOOT INSUFICIENTE** ‚ùå\n\n"
            f"üí∞ **Necesitas:** {total_cost} loot\n"
            f"üí≥ **Tienes:** {user_data['credits']} loot\n"
            f"üìä **Costo:** 5 loot por tarjeta\n"
            f"üéØ **Tarjetas:** {len(cards_found)}\n\n"
            f"üí° Usa `/loot` para obtener loot gratis",
            parse_mode=ParseMode.MARKDOWN)
        return

    # NO descontar todos los cr√©ditos al inicio - se descontar√°n individualmente

    # Procesar cada tarjeta individualmente CON CONTROL DE RATE LIMITING
    results = [] # Guardar resultados para estad√≠sticas
    for i, card_data in enumerate(cards_found, 1):

        # Descontar 1 cr√©ditos por esta tarjeta espec√≠fica
        current_user_data = db.get_user(user_id)
        if current_user_data['credits'] >= 1:
            db.update_user(user_id, {'credits': current_user_data['credits'] - 1})
        else:
            # Si no hay suficientes cr√©ditos para esta tarjeta, parar el procesamiento
            await update.message.reply_text(
                f"‚ùå **LOOT INSUFICIENTE** ‚ùå\n\n"
                f"üí∞ **Se necesitan 5 loot m√°s para la tarjeta {i}/{len(cards_found)}**\n"
                f"üí≥ **Loot actual:** {current_user_data['credits']}\n\n"
                f"‚ö†Ô∏è **Procesamiento detenido en tarjeta {i-1}/{len(cards_found)}**",
                parse_mode=ParseMode.MARKDOWN)
            break

        # Mensaje de procesamiento
        processing_msg = await update.message.reply_text(
            f"‚ïî‚ïê[ {session['gate_emoji']} {session['gate_name'].upper()} - INICIANDO ]‚ïê‚ïó\n"
            f"‚ïë üí≥ Tarjeta: [{i}/{len(cards_found)}] {card_data[:4]}****{card_data[-4:]} ‚ïë\n"
            f"‚ïë ‚è≥ Estado : Conectando al gateway...    \n"
            f"‚ïë üîÑ Progreso: [‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 20%           \n"
            f"‚ïë üì° Latencia: Calculando...              \n"
            f"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù",
            parse_mode=ParseMode.MARKDOWN
        )

        # CONTROLAR RATE LIMITING - Esperar entre mensajes
        if i > 1:
            await asyncio.sleep(3)  # Pausa entre tarjetas

        # Simular progreso CON CONTROL DE RATE LIMITING
        await asyncio.sleep(1.5)
        await gate_system.safe_edit_message(
            processing_msg,
            f"‚ïî‚ïê[ {session['gate_emoji']} {session['gate_name'].upper()} - VERIFICANDO ]‚ïê‚ïó\n"
            f"‚ïë üí≥ Tarjeta: [{i}/{len(cards_found)}] {card_data[:4]}****{card_data[-4:]} ‚ïë\n"
            f"‚ïë ‚è≥ Estado : Validando datos...          \n"
            f"‚ïë üîÑ Progreso: [‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 40%           \n"
            f"‚ïë üì° Latencia: 0.234s                    \n"
            f"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        )

        await asyncio.sleep(1.5)
        await gate_system.safe_edit_message(
            processing_msg,
            f"‚ïî‚ïê[ {session['gate_emoji']} {session['gate_name'].upper()} - PROCESANDO ]‚ïê‚ïó\n"
            f"‚ïë üí≥ Tarjeta: [{i}/{len(cards_found)}] {card_data[:4]}****{card_data[-4:]} ‚ïë\n"
            f"‚ïë ‚è≥ Estado : Enviando al gateway...      \n"
            f"‚ïë üîÑ Progreso: [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë] 60%           \n"
            f"‚ïë üì° Latencia: 0.456s                    \n"
            f"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        )

        # Procesar seg√∫n el tipo de gate
        gate_type = session['gate_type']
        if gate_type == 'gate_stripe':
            result = await gate_system.process_stripe_gate(card_data)
        elif gate_type == 'gate_amazon':
            result = await gate_system.process_amazon_gate(card_data)
        elif gate_type == 'gate_paypal':
            result = await gate_system.process_paypal_gate(card_data)
        elif gate_type == 'gate_ayden':
            result = await gate_system.process_ayden_gate(card_data)
        elif gate_type == 'gate_ccn':
            result = await gate_system.process_ccn_charge(card_data)
        elif gate_type == 'gate_cybersource':
            result = await gate_system.process_cybersource_ai(card_data)
        elif gate_type == 'gate_worldpay':
            result = await gate_system.process_worldpay_gate(card_data)
        elif gate_type == 'gate_braintree':
            result = await gate_system.process_braintree_gate(card_data)
        else:
            result = await gate_system.process_auth_gate(card_data)

        results.append(result) # Agregar resultado para estad√≠sticas

        # Mostrar resultado final con nuevo formato
        parts = card_data.split('|')
        card_number = parts[0] if len(parts) > 0 else 'N/A'
        exp_date = f"{parts[1]}/{parts[2]}" if len(parts) > 2 else 'N/A'

        # Obtener emoji del gate
        gate_emoji = session['gate_emoji']
        gate_name = session['gate_name'].upper()

        # Obtener cr√©ditos actualizados DESPU√âS de cada verificaci√≥n individual
        current_user_data = db.get_user(user_id)
        credits_remaining = current_user_data['credits']

        final_response = f"‚ïî‚ïê[ {gate_emoji} {gate_name}: RESULTADO ]‚ïê‚ïó\n"
        final_response += f"‚ïë üí≥ Tarjeta : {card_number}\n"
        final_response += f"‚ïë üìÖ Expira : {exp_date}\n"
        final_response += f"‚ïë üéØ Estado : {result['status']}\n"
        final_response += f"‚ïë üì° Gateway : {result['gateway']}\n"
        final_response += f"‚ïë üí∞ Monto : {result.get('amount', '$0.00')}\n"
        final_response += f"‚ïë üìù Respuesta : {result['message']}\n"
        final_response += f"‚ïë ‚è∞ Tiempo : {datetime.now().strftime('%H:%M:%S')}\n"
        final_response += f"‚ïë üë§ Checker : @{update.effective_user.username or update.effective_user.first_name}\n"
        final_response += f"‚ïë üî¢ Proceso : {i} / {len(cards_found)}\n"
        final_response += f"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"

        final_response += f"üí∞ loot restantes ‚Üí {credits_remaining}\n\n"

        # System notice seg√∫n el resultado
        if result['success']:
            final_response += f"‚úÖ SYSTEM NOTICE:\n"
            final_response += f"‚Ä¢ Transacci√≥n aprobada por el gateway\n"
            final_response += f"‚Ä¢ M√©todo de pago v√°lido y activo"
        else:
            final_response += f"‚ö†Ô∏è SYSTEM NOTICE:\n"
            final_response += f"‚Ä¢ Transacci√≥n rechazada por el gateway\n"
            final_response += f"‚Ä¢ M√©todo de pago no v√°lido"


        keyboard = [[InlineKeyboardButton("üîÑ Procesar otra", callback_data=gate_type),
                    InlineKeyboardButton("üîô Men√∫ principal", callback_data='gates_back')]]

        await gate_system.safe_edit_message(
            processing_msg,
            final_response,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        # Pausa adicional entre tarjetas para evitar rate limiting
        if i < len(cards_found):
            await asyncio.sleep(2)

    # Sistema de estad√≠sticas avanzadas con analytics
    try:
        # Contar √©xitos por gateway para estad√≠sticas
        gateway_stats = {}
        for result in results:
            gateway = result['gateway']
            if gateway not in gateway_stats:
                gateway_stats[gateway] = {'success': 0, 'total': 0}
            gateway_stats[gateway]['total'] += 1
            if result['is_live']:
                gateway_stats[gateway]['success'] += 1

        # Actualizar estad√≠sticas del usuario
        current_stats = db.get_user(user_id)
        new_stats = {
            'total_checked': current_stats['total_checked'] + len(cards_found)
        }

        # Agregar estad√≠sticas por gateway si no existen
        if 'gateway_stats' not in current_stats:
            current_stats['gateway_stats'] = {}

        # Actualizar stats por gateway
        for gateway, stats in gateway_stats.items():
            if gateway not in current_stats['gateway_stats']:
                current_stats['gateway_stats'][gateway] = {'success': 0, 'total': 0}
            current_stats['gateway_stats'][gateway]['success'] += stats['success']
            current_stats['gateway_stats'][gateway]['total'] += stats['total']

        new_stats['gateway_stats'] = current_stats['gateway_stats']
        db.update_user(user_id, new_stats)

    except Exception as e:
        logger.error(f"‚ùå Error actualizando estad√≠sticas: {e}")
        # Continuar sin actualizar estad√≠sticas si hay error


    # Limpiar sesi√≥n al final
    if user_id in gate_system.active_sessions:
        del gate_system.active_sessions[user_id]
def check_user_premium_status(user_id: str) -> dict:
    """Funci√≥n de verificaci√≥n r√°pida del estado premium - SOLO PARA TESTING"""
    try:
        user_data = db.get_user(user_id)
        is_premium = user_data.get('premium', False)
        premium_until = user_data.get('premium_until')

        return {
            'user_id': user_id,
            'is_premium': is_premium,
            'premium_until': premium_until,
            'is_founder': db.is_founder(user_id),
            'is_cofounder': db.is_cofounder(user_id),
            'is_moderator': db.is_moderator(user_id),
            'authorized_for_gates': gate_system.is_authorized(user_id) if gate_system else False
        }
    except Exception as e:
        return {'error': str(e)}

async def is_authorized(user_id: str, premium_required: bool = False) -> tuple[bool, str]:
    """
    Verifica si el usuario est√° autorizado para usar los gates
    Returns: (is_authorized, status_message)
    """
    try:
        # Verificar admin primero
        if int(user_id) in ADMIN_IDS:
            return True, "üëë ADMIN"

        # Verificar roles de staff desde la base de datos
        if db.is_founder(user_id):
            return True, "üëë FUNDADOR"

        if db.is_cofounder(user_id):
            return True, "üíé CO-FUNDADOR"

        if db.is_moderator(user_id):
            return True, "üõ°Ô∏è MODERADOR"

        # CORRECCI√ìN: Obtener datos del usuario y verificar premium
        user_data = db.get_user(user_id)

        # Forzar verificaci√≥n de premium desde la base de datos
        is_premium = user_data.get('premium', False)
        premium_until = user_data.get('premium_until')

        logger.info(f"Verificando usuario {user_id}: premium={is_premium}, until={premium_until}")

        if is_premium and premium_until:
            try:
                premium_until_date = datetime.fromisoformat(premium_until)
                if datetime.now() < premium_until_date:
                    logger.info(f"Usuario {user_id} tiene premium v√°lido hasta {premium_until_date}")
                    return True, "üíé PREMIUM"
                else:
                    # Premium expirado
                    logger.info(f"Premium de usuario {user_id} expirado")
                    db.update_user(user_id, {'premium': False, 'premium_until': None})
                    return False, "‚ùå PREMIUM EXPIRADO"
            except Exception as date_error:
                logger.error(f"Error parsing fecha premium para {user_id}: {date_error}")
                return False, "‚ùå ERROR PREMIUM"
        elif is_premium and not premium_until:
            # Premium permanente
            logger.info(f"Usuario {user_id} tiene premium permanente")
            return True, "üíé PREMIUM"

        # Usuario est√°ndar
        logger.info(f"Usuario {user_id} es est√°ndar")
        if premium_required:
            return False, "‚ùå REQUIERE PREMIUM"
        else:
            return True, "‚úÖ USUARIO EST√ÅNDAR"

    except Exception as e:
        logger.error(f"Error en verificaci√≥n de autorizaci√≥n para {user_id}: {e}")
        return False, "‚ùå ERROR DEL SISTEMA"
